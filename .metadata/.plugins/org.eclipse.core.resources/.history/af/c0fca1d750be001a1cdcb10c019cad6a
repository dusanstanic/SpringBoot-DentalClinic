package com.example.demo.service;

import java.sql.Time;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.model.Appointment;
import com.example.demo.model.AppointmentTime;
import com.example.demo.repository.AppointmentRepository;
import com.example.demo.repository.AppointmentTimeRepository;

@Service
public class AppointmentServiceImpl implements AppointmentService {

	@Autowired
	AppointmentRepository appointmentRepo;
	@Autowired
	AppointmentTimeRepository appointmentTimeRepo;

	public void save(Appointment appointment) {
		Date appointmentDate = appointment.getAppointmentTime().getAppointmentDate();

		List<AppointmentTime> appointmentTimesForDate = appointmentTimeRepo
				.getAppointmentTimesForDateAndHour(appointmentDate, appointment.getAppointmentTime().getFromTime());

		setAvailabiltyForAppointmentTimes(appointment, false);

		appointmentRepo.save(appointment);
	}

	@Override
	public List<Appointment> findAllWithAppointmentDate(Date appointmentDate) {
		return appointmentRepo.findAllWithAppointmentDate(appointmentDate);
	}

	private boolean isFullHour(Time fromTime, Time toTime) {
		int toTimeMinutes = toTime.getMinutes();
		int fromTimeMinutes = fromTime.getMinutes();
		return toTimeMinutes == 0 && fromTimeMinutes == 0;
	}

	@Override
	public boolean deleteByPhoneNumber(int phoneNumber) {
		Appointment appointment = appointmentRepo.getLatestAppointmentByPhoneNumber(phoneNumber);

		Date appointmentDate = appointment.getAppointmentTime().getAppointmentDate();

		Calendar cal = Calendar.getInstance();
		cal.setTime(appointmentDate);
		cal.add(Calendar.HOUR_OF_DAY, appointment.getAppointmentTime().getFromTime().getHours());

		Instant then = cal.toInstant();
		System.out.println(then);
		Instant now = Instant.now();
		Instant twentyFourHoursEarlier = now.minus(24, ChronoUnit.HOURS);
		boolean within24Hours = !then.isBefore(twentyFourHoursEarlier);

		if (within24Hours) {
			setAvailabiltyForAppointmentTimes(appointment, true);
			appointmentRepo.delete(appointment);
			return true;
		}
		return false;
	}

	private void setAvailabiltyForAppointmentTimes(Appointment appointment, boolean makeAvailable) {
		byte available = (byte) (makeAvailable == true ? 1 : 0);
		Date appointmentDate = appointment.getAppointmentTime().getAppointmentDate();
		Time fromTime = appointment.getAppointmentTime().getFromTime();
		Time toTime = appointment.getAppointmentTime().getToTime();

		List<AppointmentTime> appointmentTimesForDate = appointmentTimeRepo
				.getAppointmentTimesForDateAndHour(appointmentDate, fromTime);

		appointment.getAppointmentTime().setAvailable((byte) 0);
		if (isFullHour(fromTime, appointment.getAppointmentTime().getToTime())) {
			appointmentTimesForDate.forEach(a -> {
				a.setAvailable(available);
				appointmentTimeRepo.update(a);
			});
		} else {
			appointmentTimesForDate.stream().filter(at -> {
				return (at.getFromTime().getMinutes() == fromTime.getMinutes()
						&& at.getToTime().getMinutes() == toTime.getMinutes())
						|| isFullHour(at.getFromTime(), at.getToTime());
			}).forEach(at -> {
				at.setAvailable(available);
				appointmentTimeRepo.update(at);
			});
		}
	}
}
